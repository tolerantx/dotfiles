" Vimrc File

let mapleader = "\<Space>"

nmap <leader>vr :sp $MYVIMRC<CR>
nmap <leader>so :source $MYVIMRC<CR>

filetype off                  " required
filetype plugin on

runtime macros/matchit.vim

set nocompatible
if has("autocmd")
  filetype indent plugin on
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'mileszs/ack.vim'
Plugin 'ervandew/supertab'
Plugin 'tpope/vim-rails'
Plugin 'ngmy/vim-rubocop'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdcommenter'
Plugin 'djoshea/vim-autoread'
Plugin 'kana/vim-textobj-user'
Plugin 'textobj-rubyblock'
Plugin 'thoughtbot/vim-rspec'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Allow us to use Ctrl-s and Ctrl-q as keybinds
" silent !stty -ixon

" Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon

" Color
set t_Co=256
colorscheme ir_black

" Custom config
syntax on
" set nocompatible                " Don't maintain compatibilty with Vi.
set mouse=a
set number                      " Display line numbers beside buffer
set backspace=indent,eol,start  " Sane backspace behavior

" Identation
set expandtab
set shiftwidth=2
set softtabstop=2

" Map keys
map <C-S-Up> :wincmd k<CR>
map <C-S-Down> :wincmd j<CR>
map <C-S-Left> :wincmd h<CR>
map <C-S-Right> :wincmd l<CR>
map <C-n> :NERDTreeToggle<CR>
map œ :q <CR>                           " <Option-q>
map ® :NERDTreeFind <CR>                " <Option-r>
nmap ß :w <CR> :echo "Saved!" <CR>      " <Option-s>
imap ß <Esc>:w <CR> :echo "Saved!" <CR> " <Option-s>
nmap å <Esc>gg V G<CR>                  " <Option-a>
imap å <Esc>gg V G<CR>                  " <Option-a>

" Move lines
nnoremap ∆ :m .+1<CR>==        " <Option-k>
nnoremap ˚ :m .-2<CR>==        " <Option-j>
" inoremap ∆ <Esc>:m .+1<CR>==gi " <Option-k>
inoremap ∆ <Esc>:m .+1<CR>     " <Option-k>
" inoremap ˚ <Esc>:m .-2<CR>==gi " <Option-j>
inoremap ˚ <Esc>:m .-2<CR>     " <Option-j>
vnoremap ∆ :m '>+1<CR>gv=gv    " <Option-k>
vnoremap ˚ :m '<-2<CR>gv=gv    " <Option-j>

" Copy, cut and paste
vmap ç y:call system("pbcopy", getreg("\""))<CR> " <Option-c>
vmap ≈ d:call system("pbcopy", getreg("\""))<CR> " <Option-x>
nmap √ :call setreg("\"",system("pbpaste"))<CR>p " <Option-v>

" Tabs
nnoremap † :tabnew<CR> " <Option-t> new tab
vnoremap † <Esc>:tabnew<CR> " <Option-t> new tab
inoremap † <Esc>:tabnew<CR> " <Option-t> new tab
map! ‘ <Esc>gt<CR>     " <Option-[> move right
map! “ <Esc>gT<CR>     " <Option-]> move left
nmap ‘ <Esc>gt<CR>     " <Option-[> move right
nmap “ <Esc>gT<CR>     " <Option-]> move left

" RSpec.vim mappings
let g:rspec_command = '!bin/eureka rspec {spec}'
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" NERDTree
" open NERDTree automatically
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Highlight line
set cursorline
hi cursorline cterm=none term=none
highlight CursorLine guibg=#303000 ctermbg=234

" Color column
set colorcolumn=80
highlight ColorColumn guibg=#303000 ctermbg=234

" ControlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'

" Remove trailing white spaces
autocmd BufWritePre * %s/\s\+$//e

" Copy current path file
let @+ = expand("%")
nmap pwf :let @+ = expand("%")<CR>

" Copy current directory path
nmap pwd :let @+ = expand("%:h")<CR>

let g:vimrubocop_keymap = 0
nmap <Leader>r :RuboCop<CR>

" Clone current line and puts it down
vnoremap ∂ Yp        " <Option-d>
inoremap ∂ <Esc> Yp  " <Option-d>
nnoremap ∂ Yp        " <Option-d>

" NERD Commenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" set laststatus=2                    " Always show status line
" set statusline =%{fugitive#statusline()}
" set statusline +=\ %f
" set statusline +=\ %y\ %h%w%m%r
" set statusline +=%=
" set statusline +=\Line:
" set statusline +=%l
" set statusline +=\ Column:
" set statusline +=%c%V\ %=\ %P

" " Status Bar Colors
" au InsertEnter * hi statusline guifg=black guibg=#d8afff ctermfg=black ctermbg=Yellow
" au InsertLeave * hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan
" hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan
"
" " Status line
" " default: set statusline=%f\ %h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)

" Status Line Custom
let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '^V' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

" Automatically change the statusline color depending on mode
hi StatusLineNC ctermfg=White ctermbg=DarkGrey

function! ChangeStatuslineColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=Black ctermbg=Cyan'
  elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·Block' || get(g:currentmode, mode(), '') ==# 't')
    exe 'hi! StatusLine ctermfg=White ctermbg=DarkBlue'
  elseif (mode() ==# 'i')
    exe 'hi! StatusLine ctermfg=Black ctermbg=Green'
  else
    exe 'hi! StatusLine ctermfg=White ctermbg=DarkYellow'
  endif

  return ''
endfunction

set laststatus=2
" set noshowmode
set statusline=
set statusline+=%{ChangeStatuslineColor()}               " Changing the statusline color
set statusline+=%0*\ %{toupper(g:currentmode[mode()])}\  " Current mode
set statusline+=%1*\ %t\                                 " File path, modified, readonly, helpfile, preview
" set statusline+=%3*│                                   " Separator
" set statusline+=%2*\ %Y\                               " FileType
set statusline+=%3*│                                     " Separator
set statusline+=%2*\ %{''.(&fenc!=''?&fenc:&enc).''}     " Encoding
set statusline+=\ (%{&ff})                               " FileFormat (dos/unix..)
set statusline+=%=                                       " Right Side
set statusline+=%1*\ ln:\%02l/%L\ col:\%02v\ (%3p%%)\              " Line number / total lines, percentage of document

hi User1 ctermfg=007 ctermbg=239 guibg=#4e4e4e guifg=#adadad
hi User2 ctermfg=007 ctermbg=236 guibg=#303030 guifg=#adadad
hi User3 ctermfg=236 ctermbg=236 guibg=#303030 guifg=#303030
hi User4 ctermfg=239 ctermbg=239 guibg=#4e4e4e guifg=#4e4e4e

